DDD(Domain Driven Design，领域驱动设计)分层
	Application为应用层
		Infrastructure,基础实施层
			AutoMapper
				RequestToCause
				ResultToResponse
			localization
		Domain,领域层
			Model/Entity,模型/实体
				属性
				id
				createdTime
				modifiedTime
				tenantId

				code
				name
				parentId
				方法
				Validate()校验
				Normalize()/Initialize()正常化/初始化
				
				
			Repository/DAO,仓储/数据访问对象
				方法
				Save()
				Update()
				List()
				Page()
				Count()
				Sum()
			
			@Table
		Context/Manager,环境层/通用业务处理层
			Manager
				GetXXById
			EventBus/Producer,事件总线/生产者
				Send()
				Publish()
			Writer/Consumer/Handler,处理者/消费者
				Consume()/HandleEvent()
		Application/Scheduler,应用层/调度层
			Service/AppService,服务
			DTO	
				Input/Cause,输入
					Validate()校验
					MapToRequest()
					---
					PageDataCause
				Output/Result,输出
					MapToResponse()
					---
					ValidResult
					MessageResult
					DataResult<T>	
					PageDataResult<T>
				TO/VO
				
		User Interface,用户界面层,web层
			Controller/ApiController
			Request
				ApiName()
				Validate()校验
				MapToCause()
				---
				PageDataRequest
			Reponse
				MapToResult()
				---
				MessageResponse
				DataResponse<T>
				PageDataResponse<T>
			@Authorize
		
Module
	Initialize,初始化 

Cache

Client

Context

Template

Visitor

Dispatcher

View

Filter 

Strategy

State 
1.java

2.c#
	